CPU32 Instruction Set Architecture
----------------------------------

Encoding Formats
----------------

R OOOOFFFFAAAABBBBDDDDXXXXXXXXXXXX  register
I OOOOFFFFAAAADDDDIIIIIIIIIIIIIIII  immediate

Core Instruction Set
--------------------

0X ALU Rd, Ra, Rb        see ALU ops below
1X ALU Rd, Ra, #I  

22 LW Rd, [Ra, #I]       Rd = M(Ra + I)
32 SW Rd, [Ra, #I]       M(Ra + I) = Rd

40 BLZ Rd, Ra, rel       if (Ra == 0) { Rd = PC + 4, PC += I }
44 BLZ Rd, Ra, Rb        if (Ra == 0) { Rd = PC + 4, PC = Rb }
48 BLNZ Rd, Ra, rel      if (Ra != 0) { Rd = PC + 4, PC += I }
4C BLNZ Rd, Ra, Rb       if (Ra != 0) { Rd = PC + 4, PC = Rb }

Extended Instruction Set (tbd)
------------------------

52 LW Rd, [PC, #I]       Rd = M(PC + I)

6X LB
7X SB
8X LH
9X SH

ALU Instructions (replace Rb w/ #I for immediate form)
------------------------------------------------------

X0 OR  Rd, Ra, Rb        Rd = Ra | Rb
X1 AND Rd, Ra, Rb        Rd = Ra & Rb
X2 ADD Rd, Ra, Rb        Rd = Ra + Rb
X3 SUB Rd, Ra, Rb        Rd = Ra - Rb
X4 SHL Rd, Ra, Rb        Rd = Ra << Rb[0:4]
X5 SHR Rd, Ra, Rb        Rd = Ra >> Rb[0:4]
X6 XOR Rd, Ra, Rb        Rd = Ra ^ Rb
X7 TBS Rd, Ra, Rb        Rd = Ra & (1 << Rb)

X8 BIS Rd, Ra, Rb        Rd = Ra | (1 << Rb)
X9 BIC Rd, Ra, Rb        Rd = Ra & ~(1 << Rb)
XA SLT Rd, Ra, Rb        Rd = Ra < Rb
XB SGT Rd, Ra, Rb        Rd = Ra > Rb
XC MLO Rd, Ra, Rb        Rd = (Ra & 0xFFFF0000) | (Rb & 0xFFFF)
XD MHI Rd, Ra, Rb        Rd = (Ra & 0xFFFF) | (Rb << 16)
XE ASR Rd, Ra, Rb        Rd = (Ra >>> Rb[0:4])
XF MUL Rd, Ra, Rb        Rd = Ra * Rb

Pseudo Instructions
-------------------

MOV Rd, Rb               OR Rd, R0, Rb
SNE Rd, Ra, Rb           SUB Rd, Ra, Rb
NOT Rd, Ra               XOR Rd, Ra, #-1

Registers
---------
R0-R3 args / results
R13 stack pointer (aka SP)
R14 link (aka LR)
R15 zero (aka ZR)

Open Issues
-----------
- syntax for conditional branches is confusing
- consider allowing B [Rx] as well as B Rx?
- allow # in front of constants
